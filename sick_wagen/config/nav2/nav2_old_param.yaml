amcl:
  ros__parameters:
    alpha1: 0.2  # 回転運動中のロボットの動きの不確実性
    alpha2: 0.2  # 並進運動中のロボットの動きの不確実性
    alpha3: 0.2  # 並進運動中の回転の不確実性
    alpha4: 0.2  # 回転運動中の並進の不確実性
    alpha5: 0.2  # 回転と並進の組み合わせの不確実性
    base_frame_id: "base_footprint"  # ロボットの基準フレームID
    beam_skip_distance: 0.5  # メートル
    beam_skip_error_threshold: 0.9  # ビームスキップのエラー閾値
    beam_skip_threshold: 0.3  # ビームスキップの閾値
    do_beamskip: false  # ビームスキップを有効にするかどうか
    global_frame_id: "map"  # グローバル座標系のフレームID
    lambda_short: 0.1  # 短距離センサーのモデルパラメータ
    laser_likelihood_max_dist: 2.0  # メートル
    laser_max_range: 100.0  # メートル
    laser_min_range: -1.0  # メートル
    laser_model_type: "likelihood_field"  # レーザーモデルの種類
    max_beams: 60  # 使用するレーザービームの最大数
    max_particles: 2000  # パーティクルフィルタの最大パーティクル数
    min_particles: 500  # パーティクルフィルタの最小パーティクル数
    odom_frame_id: "odom"  # オドメトリのフレームID
    pf_err: 0.05  # パーティクルフィルタのエラー閾値
    pf_z: 0.99  # パーティクルフィルタの尤度閾値
    recovery_alpha_fast: 0.0  # 高速リカバリのパラメータ
    recovery_alpha_slow: 0.0  # 低速リカバリのパラメータ
    resample_interval: 1  # リサンプリングの間隔（ステップ数）
    robot_model_type: "nav2_amcl::DifferentialMotionModel"  # ロボットの運動モデル
    save_pose_rate: 0.5  # 秒
    sigma_hit: 0.2  # メートル
    tf_broadcast: true  # TFをブロードキャストするかどうか
    transform_tolerance: 1.0  # 秒
    service_introspection_mode: "disabled"  # サービスのインスペクションモード
    update_min_a: 0.2  # ラジアン
    update_min_d: 0.25  # メートル
    z_hit: 0.5  # センサーのヒット確率
    z_max: 0.05  # センサーの最大距離確率
    z_rand: 0.5  # センサーのランダム確率
    z_short: 0.05  # センサーの短距離確率
    scan_topic: scan  # レーザースキャンのトピック名

bt_navigator:
  ros__parameters:
    global_frame: map  # グローバル座標系のフレームID
    robot_base_frame: base_link  # ロボットの基準フレームID
    odom_topic: odom  # オドメトリのトピック名
    bt_loop_duration: 10  # 秒
    filter_duration: 0.3  # 秒
    default_server_timeout: 20  # 秒
    wait_for_service_timeout: 1000  # ミリ秒
    service_introspection_mode: "disabled"  # サービスのインスペクションモード
    navigators: ["navigate_to_pose", "navigate_through_poses"]  # 使用するナビゲータのリスト
    navigate_to_pose:
      plugin: "nav2_bt_navigator::NavigateToPoseNavigator"  # ナビゲータのプラグイン
      enable_groot_monitoring: true  # Grootモニタリングを有効にするかどうか
      groot_server_port: 1667  # Grootサーバーポート番号
    navigate_through_poses:
      plugin: "nav2_bt_navigator::NavigateThroughPosesNavigator"  # ナビゲータのプラグイン
      enable_groot_monitoring: true  # Grootモニタリングを有効にするかどうか
      groot_server_port: 1669  # Grootサーバーポート番号

controller_server:
  ros__parameters:
    controller_frequency: 20.0  # 制御ループの周波数（Hz）
    costmap_update_timeout: 0.30  # コストマップ更新のタイムアウト（秒）
    min_x_velocity_threshold: 0.001  # 最小X方向速度の閾値（m/s）
    min_y_velocity_threshold: 0.5  # 最小Y方向速度の閾値（m/s）
    min_theta_velocity_threshold: 0.001  # 最小角速度の閾値（rad/s）
    failure_tolerance: 0.3  # 制御失敗の許容時間（秒）
    progress_checker_plugins: ["progress_checker"]  # プログレスチェッカーのプラグインリスト
    goal_checker_plugins: ["general_goal_checker"]  # ゴールチェッカーのプラグインリスト
    controller_plugins: ["FollowPath"]  # コントローラのプラグインリスト
    use_realtime_priority: false  # リアルタイム優先度を使用するかどうか
    speed_limit_topic: "speed_limit"  # スピード制限のトピック名

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"  # プログレスチェッカーのプラグイン
      required_movement_radius: 0.5  # 必要な移動半径（メートル）
      movement_time_allowance: 10.0  # 移動許容時間（秒）

    # Goal checker parameters
    general_goal_checker:
      stateful: True  # 状態を保持するかどうか
      plugin: "nav2_controller::SimpleGoalChecker"  # ゴールチェッカーのプラグイン
      xy_goal_tolerance: 0.25  # XY平面でのゴール許容誤差（メートル）
      yaw_goal_tolerance: 0.25  # ゴールの角度許容誤差（ラジアン）

    FollowPath:
      plugin: "nav2_mppi_controller::MPPIController"  # MPPIコントローラのプラグイン
      time_steps: 56  # 時間ステップ数
      model_dt: 0.05  # モデルの時間間隔（秒）
      batch_size: 2000  # バッチサイズ
      ax_max: 3.0  # 最大X方向加速度（m/s^2）
      ax_min: -3.0  # 最小X方向加速度（m/s^2）
      ay_max: 3.0  # 最大Y方向加速度（m/s^2）
      ay_min: -3.0  # 最小Y方向加速度（m/s^2）
      az_max: 3.5  # 最大Z方向加速度（m/s^2）
      vx_std: 0.2  # X方向速度の標準偏差（m/s）
      vy_std: 0.2  # Y方向速度の標準偏差（m/s）
      wz_std: 0.4  # 角速度の標準偏差（rad/s）
      vx_max: 0.5  # 最大X方向速度（m/s）
      vx_min: -0.35  # 最小X方向速度（m/s）
      vy_max: 0.5  # 最大Y方向速度（m/s）
      wz_max: 1.9  # 最大角速度（rad/s）
      iteration_count: 1  # イテレーション回数
      prune_distance: 1.7  # プルーニング距離（メートル）
      transform_tolerance: 0.1  # TF変換の許容時間（秒）
      temperature: 0.3  # 温度パラメータ（単位なし）
      gamma: 0.015  # ガンマパラメータ（単位なし）
      motion_model: "DiffDrive"  # モーションモデルの種類
      visualize: true  # 可視化を有効にするかどうか
      publish_optimal_trajectory: true  # 最適な軌道を公開するかどうか
      regenerate_noises: true  # ノイズを再生成するかどうか
      TrajectoryVisualizer:
        trajectory_step: 5  # 軌道のステップ数
        time_step: 3  # 時間ステップ数
      AckermannConstraints:
        min_turning_r: 0.2  # 最小旋回半径（メートル）
      critics:
        [
          "ConstraintCritic",  # 制約に基づく評価
          "CostCritic",        # コストに基づく評価
          "GoalCritic",        # ゴールに基づく評価
          "GoalAngleCritic",   # ゴール角度に基づく評価
          "PathAlignCritic",   # 経路整列に基づく評価
          "PathFollowCritic",  # 経路追従に基づく評価
          "PathAngleCritic",   # 経路角度に基づく評価
          "PreferForwardCritic",  # 前進を優先する評価
        ]
      ConstraintCritic:
        enabled: true  # 有効化するかどうか
        cost_power: 1  # コストの重み付け指数
        cost_weight: 4.0  # コストの重み
      GoalCritic:
        enabled: true  # 有効化するかどうか
        cost_power: 1  # コストの重み付け指数
        cost_weight: 5.0  # コストの重み
        threshold_to_consider: 1.4
      GoalAngleCritic:
        enabled: true  # 有効化するかどうか
        cost_power: 1  # コストの重み付け指数
        cost_weight: 3.0  # コストの重み
        threshold_to_consider: 0.5  # 評価を考慮する閾値
      PreferForwardCritic:
        enabled: true  # 有効化するかどうか
        cost_power: 1  # コストの重み付け指数
        cost_weight: 5.0  # コストの重み
        threshold_to_consider: 0.5  # 評価を考慮する閾値
      CostCritic:
        enabled: true  # 有効化するかどうか
        cost_power: 1  # コストの重み付け指数
        cost_weight: 3.81  # コストの重み
        near_collision_cost: 253  # 衝突に近い場合のコスト
        critical_cost: 300.0  # 臨界コスト
        consider_footprint: false  # フットプリントを考慮するかどうか
        collision_cost: 1000000.0  # 衝突時のコスト
        near_goal_distance: 1.0  # ゴールに近い距離（メートル）
        trajectory_point_step: 2  # 軌道ポイントのステップ数
      PathAlignCritic:
        enabled: true  # 有効化するかどうか
        cost_power: 1  # コストの重み付け指数
        cost_weight: 14.0  # コストの重み
        max_path_occupancy_ratio: 0.05  # 経路占有率の最大値
        trajectory_point_step: 4  # 軌道ポイントのステップ数
        threshold_to_consider: 0.5  # 評価を考慮する閾値
        offset_from_furthest: 20  # 最も遠いポイントからのオフセット
        use_path_orientations: false  # 経路の方向を使用するかどうか
      PathFollowCritic:
        enabled: true  # 有効化するかどうか
        cost_power: 1  # コストの重み付け指数
        cost_weight: 5.0  # コストの重み
        offset_from_furthest: 5  # 最も遠いポイントからのオフセット
        threshold_to_consider: 1.4  # 評価を考慮する閾値
      PathAngleCritic:
        enabled: true  # 有効化するかどうか
        cost_power: 1  # コストの重み付け指数
        cost_weight: 2.0  # コストの重み
        offset_from_furthest: 4  # 最も遠いポイントからのオフセット
        threshold_to_consider: 0.5  # 評価を考慮する閾値
        max_angle_to_furthest: 1.0  # 最も遠いポイントへの最大角度（ラジアン）
        mode: 0  # 動作モード
      # TwirlingCritic:
      #   enabled: true
      #   twirling_cost_power: 1
      #   twirling_cost_weight: 10.0

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.05
      robot_radius: 0.22
      plugins: ["voxel_layer", "inflation_layer"]
      filters: ["keepout_filter"]
      keepout_filter:
        plugin: "nav2_costmap_2d::KeepoutFilter"
        enabled: KEEPOUT_ZONE_ENABLED
        filter_info_topic: "keepout_costmap_filter_info"
        override_lethal_cost: True
        lethal_override_cost: 200
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.70
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          # A relative topic will be appended to the parent of the local_costmap namespace.
          # For example:
          #   * User chosen namespace is `tb4`.
          #   * User chosen topic is `scan`.
          #   * Topic will be remapped to `/tb4/scan` without `local_costmap`.
          #   * Use global topic `/scan` if you do not wish the node namespace to apply
          topic: scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True
      service_introspection_mode: "disabled"

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      robot_radius: 0.22
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      filters: ["keepout_filter", "speed_filter"]
      keepout_filter:
        plugin: "nav2_costmap_2d::KeepoutFilter"
        enabled: KEEPOUT_ZONE_ENABLED
        filter_info_topic: "keepout_costmap_filter_info"
        override_lethal_cost: True
        lethal_override_cost: 200
      speed_filter:
        plugin: "nav2_costmap_2d::SpeedFilter"
        enabled: SPEED_ZONE_ENABLED
        filter_info_topic: "speed_costmap_filter_info"
        speed_limit_topic: "speed_limit"
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          # A relative topic will be appended to the parent of the global_costmap namespace.
          # For example:
          #   * User chosen namespace is `tb4`.
          #   * User chosen topic is `scan`.
          #   * Topic will be remapped to `/tb4/scan` without `global_costmap`.
          #   * Use global topic `/scan` if you do not wish the node namespace to apply
          topic: scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.7
      always_send_full_costmap: True
      service_introspection_mode: "disabled"

# The yaml_filename does not need to be specified since it going to be set by defaults in launch.
# If you'd rather set it in the yaml, remove the default "map" value in the launch file(s).
# file & provide full path to map below. If CLI map configuration or launch default is provided, that will be used.
map_server:
  ros__parameters:
    # yaml_filename: ""
    service_introspection_mode: "disabled"

keepout_filter_mask_server:
  ros__parameters:
    topic_name: "keepout_filter_mask"
    # yaml_filename: ""

keepout_costmap_filter_info_server:
  ros__parameters:
    type: 0
    filter_info_topic: "keepout_costmap_filter_info"
    mask_topic: "keepout_filter_mask"
    base: 0.0
    multiplier: 1.0

speed_filter_mask_server:
  ros__parameters:
    topic_name: "speed_filter_mask"
    # yaml_filename: ""

speed_costmap_filter_info_server:
  ros__parameters:
    type: 1
    filter_info_topic: "speed_costmap_filter_info"
    mask_topic: "speed_filter_mask"
    base: 100.0
    multiplier: -1.0

map_saver:
  ros__parameters:
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True
    service_introspection_mode: "disabled"

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    planner_plugins: ["GridBased"]
    costmap_update_timeout: 1.0
    service_introspection_mode: "disabled"
    GridBased:
      plugin: "nav2_navfn_planner::NavfnPlanner"
      tolerance: 0.5
      use_astar: false
      allow_unknown: true

smoother_server:
  ros__parameters:
    smoother_plugins: ["simple_smoother", "route_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      refinement_num: 2
      # True for Hybrid A* or State Lattice to not smooth over directional changes
      enforce_path_inversion: True
      do_refinement: True
    route_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      refinement_num: 5
      # False for Route Server or others where smoothing out sharp corners is OK
      enforce_path_inversion: False
      do_refinement: True

behavior_server:
  ros__parameters:
    local_costmap_topic: local_costmap/costmap_raw
    global_costmap_topic: global_costmap/costmap_raw
    local_footprint_topic: local_costmap/published_footprint
    global_footprint_topic: global_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins:
      ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors::Spin"
    backup:
      plugin: "nav2_behaviors::BackUp"
      acceleration_limit: 2.5
      deceleration_limit: -2.5
      minimum_speed: 0.10
    drive_on_heading:
      plugin: "nav2_behaviors::DriveOnHeading"
      acceleration_limit: 2.5
      deceleration_limit: -2.5
      minimum_speed: 0.10
    wait:
      plugin: "nav2_behaviors::Wait"
    assisted_teleop:
      plugin: "nav2_behaviors::AssistedTeleop"
    local_frame: odom
    global_frame: map
    robot_base_frame: base_link
    transform_tolerance: 0.1
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

waypoint_follower:
  ros__parameters:
    loop_rate: 20
    stop_on_failure: false
    service_introspection_mode: "disabled"
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

route_server:
  ros__parameters:
    # The graph_filepath does not need to be specified since it going to be set by defaults in launch.
    # If you'd rather set it in the yaml, remove the default "graph" value in the launch file(s).
    # file & provide full path to map below. If graph config or launch default is provided, it is used
    # graph_filepath: $(find-pkg-share nav2_route)/graphs/aws_graph.geojson
    boundary_radius_to_achieve_node: 1.0
    radius_to_achieve_node: 2.0
    smooth_corners: true
    operations: ["AdjustSpeedLimit", "ReroutingService", "CollisionMonitor"]
    ReroutingService:
      plugin: "nav2_route::ReroutingService"
    AdjustSpeedLimit:
      plugin: "nav2_route::AdjustSpeedLimit"
    CollisionMonitor:
      plugin: "nav2_route::CollisionMonitor"
      max_collision_dist: 3.0
    edge_cost_functions: ["DistanceScorer", "CostmapScorer"]
    DistanceScorer:
      plugin: "nav2_route::DistanceScorer"
    CostmapScorer:
      plugin: "nav2_route::CostmapScorer"

velocity_smoother:
  ros__parameters:
    smoothing_frequency: 20.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [0.5, 0.0, 2.0]
    min_velocity: [-0.5, 0.0, -2.0]
    max_accel: [2.5, 0.0, 3.2]
    max_decel: [-2.5, 0.0, -3.2]
    odom_topic: "odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0

collision_monitor:
  ros__parameters:
    base_frame_id: "base_footprint"
    odom_frame_id: "odom"
    cmd_vel_in_topic: "cmd_vel_smoothed"
    cmd_vel_out_topic: "cmd_vel"
    state_topic: "collision_monitor_state"
    transform_tolerance: 0.2
    source_timeout: 1.0
    base_shift_correction: True
    stop_pub_timeout: 2.0
    # Polygons represent zone around the robot for "stop", "slowdown" and "limit" action types,
    # and robot footprint for "approach" action type.
    polygons: ["FootprintApproach"]
    FootprintApproach:
      type: "polygon"
      action_type: "approach"
      footprint_topic: "local_costmap/published_footprint"
      time_before_collision: 1.2
      simulation_time_step: 0.1
      min_points: 6
      visualize: False
      enabled: True
    observation_sources: ["scan"]
    scan:
      type: "scan"
      topic: "scan"
      min_height: 0.15
      max_height: 2.0
      enabled: True

docking_server:
  ros__parameters:
    controller_frequency: 50.0
    initial_perception_timeout: 5.0
    wait_charge_timeout: 5.0
    dock_approach_timeout: 30.0
    undock_linear_tolerance: 0.05
    undock_angular_tolerance: 0.1
    max_retries: 3
    base_frame: "base_link"
    fixed_frame: "odom"
    dock_prestaging_tolerance: 0.5
    service_introspection_mode: "disabled"

    # Types of docks
    dock_plugins: ["simple_charging_dock"]
    simple_charging_dock:
      plugin: "opennav_docking::SimpleChargingDock"
      docking_threshold: 0.05
      staging_x_offset: -0.7
      use_external_detection_pose: true
      use_battery_status: false # true
      use_stall_detection: false # true
      dock_direction: "forward"

      external_detection_timeout: 1.0
      external_detection_translation_x: -0.18
      external_detection_translation_y: 0.0
      external_detection_rotation_roll: -1.57
      external_detection_rotation_pitch: -1.57
      external_detection_rotation_yaw: 0.0
      filter_coef: 0.1

    # Dock instances
    # The following example illustrates configuring dock instances.
    # docks: ['home_dock']  # Input your docks here
    # home_dock:
    #   type: 'simple_charging_dock'
    #   frame: map
    #   pose: [0.0, 0.0, 0.0]

    controller:
      k_phi: 3.0
      k_delta: 2.0
      v_linear_min: 0.15
      v_linear_max: 0.15
      use_collision_detection: true
      costmap_topic: "local_costmap/costmap_raw"
      footprint_topic: "local_costmap/published_footprint"
      transform_tolerance: 0.1
      projection_time: 5.0
      simulation_step: 0.1
      dock_collision_threshold: 0.3

loopback_simulator:
  ros__parameters:
    base_frame_id: "base_footprint"
    odom_frame_id: "odom"
    map_frame_id: "map"
    scan_frame_id: "base_scan" # tb4_loopback_simulator.launch.py remaps to 'rplidar_link'
    update_duration: 0.02
    scan_range_min: 0.05
    scan_range_max: 30.0
    scan_angle_min: -3.1415
    scan_angle_max: 3.1415
    scan_angle_increment: 0.02617
    scan_use_inf: true